<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Be - don&#39;t try to become. on 我的博客</title>
    <link>https://hnliu.github.io/</link>
    <description>Recent content in Be - don&#39;t try to become. on 我的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 06 Sep 2021 10:58:08 -0400</lastBuildDate><atom:link href="https://hnliu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android事件分发之Activity篇</title>
      <link>https://hnliu.github.io/post/android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E4%B9%8Bactivity%E7%AF%87/</link>
      <pubDate>Mon, 06 Sep 2021 10:58:08 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E4%B9%8Bactivity%E7%AF%87/</guid>
      <description>&lt;h4 id=&#34;android事件分发之activity篇--dispatchtoucheventontouchevent之间关系&#34;&gt;Android事件分发之Activity篇 – dispatchTouchEvent、onTouchEvent之间关系&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>hugo 部署到码云</title>
      <link>https://hnliu.github.io/post/hugo%E7%BD%91%E9%A1%B5%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Mon, 06 Sep 2021 10:58:08 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/hugo%E7%BD%91%E9%A1%B5%E9%83%A8%E7%BD%B2/</guid>
      <description>hugo 命令
 编译 hugo 编译完成后把public下的全部文件拷贝到 hnliu.github.io 文件夹下，然后push到码云仓库 点击服务 Gitee Pages 然后开启即可  </description>
    </item>
    
    <item>
      <title>python如何生成exe</title>
      <link>https://hnliu.github.io/post/python%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90exe%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 06 Sep 2021 10:58:08 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/python%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90exe%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;Python是一门高级语言，日常使用中，我们经常想让Python生成为.exe格式的文件。那么如何让Python生成exe文件呢？接下来，小编就演示操作步骤。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android优雅地处理按钮重复点击</title>
      <link>https://hnliu.github.io/post/android%E4%BC%98%E9%9B%85%E5%9C%B0%E5%A4%84%E7%90%86%E6%8C%89%E9%92%AE%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB/</link>
      <pubDate>Mon, 26 Jul 2021 08:58:59 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/android%E4%BC%98%E9%9B%85%E5%9C%B0%E5%A4%84%E7%90%86%E6%8C%89%E9%92%AE%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB/</guid>
      <description>&lt;p&gt;App中，有很大一部分场景是点击按钮，向服务端提交数据，由于网络请求需要时间，用户很可能会多次点击，造成数据重复提交，造成各种莫名其妙的问题。
因此，防止按钮多次点击，是Android开发中一个很重要的技术手段。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>详解 ImageView 的 scaleType 的各种设置</title>
      <link>https://hnliu.github.io/post/%E8%AF%A6%E8%A7%A3center_cropcenter_insidefit_center/</link>
      <pubDate>Mon, 26 Jul 2021 08:58:59 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/%E8%AF%A6%E8%A7%A3center_cropcenter_insidefit_center/</guid>
      <description>&lt;p&gt;本文详细解释了 ImageView 的 CENTER_CROP,CENTER_INSIDE,FIT_CENTER 等属性具体有什么作用以及与其他几种属性的区别&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nginx配置Http和Https步骤</title>
      <link>https://hnliu.github.io/post/nginx%E9%85%8D%E7%BD%AEhttp%E5%92%8Chttps%E6%AD%A5%E9%AA%A4/</link>
      <pubDate>Wed, 21 Jul 2021 11:25:05 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/nginx%E9%85%8D%E7%BD%AEhttp%E5%92%8Chttps%E6%AD%A5%E9%AA%A4/</guid>
      <description>&lt;h3 id=&#34;一篇关于nginx如何配置http和https的简单记录&#34;&gt;一篇关于nginx如何配置Http和Https的简单记录&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>上线流程汇总</title>
      <link>https://hnliu.github.io/post/%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B%E6%B1%87%E6%80%BB/</link>
      <pubDate>Wed, 21 Jul 2021 11:25:05 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;h3 id=&#34;客户端相关&#34;&gt;客户端相关&lt;/h3&gt;
&lt;p&gt;性能优化
使用 leakcanary 检测内存泄露&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内部跳转链接</title>
      <link>https://hnliu.github.io/post/%E5%86%85%E9%83%A8%E8%B7%B3%E8%BD%AC%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Sun, 18 Jul 2021 11:00:59 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/%E5%86%85%E9%83%A8%E8%B7%B3%E8%BD%AC%E9%93%BE%E6%8E%A5/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;内部跳转链接汇总整理&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>重构-改善既有代码的设计</title>
      <link>https://hnliu.github.io/post/%E8%AF%BB%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E7%90%86%E8%A7%A3/</link>
      <pubDate>Sun, 11 Jul 2021 11:13:32 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/%E8%AF%BB%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E7%90%86%E8%A7%A3/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;重构(名词)：对软件内部结构的一种调整，目的是不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>2021年12月大杂烩</title>
      <link>https://hnliu.github.io/post/2021%E5%B9%B412%E6%9C%88%E4%BB%BD%E6%9D%82%E8%AE%B0/</link>
      <pubDate>Fri, 09 Jul 2021 10:58:08 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/2021%E5%B9%B412%E6%9C%88%E4%BB%BD%E6%9D%82%E8%AE%B0/</guid>
      <description>官网 Android framework 源码 git 地址 github: https://github.com/android/platform_frameworks_base google 官方: https://android.googlesource.com/platform/frameworks/base.git
dalvik.system.DexClassLoader 等相关的源码
https://android.googlesource.com/platform/libcore-snapshot/
 IDEA出现java: 错误: 不支持发行版本 15 https://blog.csdn.net/weixin_48708934/article/details/109442892
 美团技术团队文章 https://tech.meituan.com/</description>
    </item>
    
    <item>
      <title>2021年7月大杂烩</title>
      <link>https://hnliu.github.io/post/2021%E5%B9%B47%E6%9C%88%E4%BB%BD%E6%9D%82%E8%AE%B0/</link>
      <pubDate>Fri, 09 Jul 2021 10:58:08 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/2021%E5%B9%B47%E6%9C%88%E4%BB%BD%E6%9D%82%E8%AE%B0/</guid>
      <description>&lt;h3 id=&#34;flex-布局教程语法篇&#34;&gt;Flex 布局教程：语法篇&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html&#34;&gt;https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2021年6月大杂烩</title>
      <link>https://hnliu.github.io/post/2021%E5%B9%B46%E6%9C%88%E4%BB%BD%E6%9D%82%E8%AE%B0/</link>
      <pubDate>Wed, 09 Jun 2021 10:58:08 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/2021%E5%B9%B46%E6%9C%88%E4%BB%BD%E6%9D%82%E8%AE%B0/</guid>
      <description>&lt;h3 id=&#34;关闭xshell后部署的项目自动关闭的解决办法亲测有效&#34;&gt;关闭xshell后，部署的项目自动关闭的解决办法。(亲测有效)&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>2021年5月大杂烩</title>
      <link>https://hnliu.github.io/post/2021%E5%B9%B45%E6%9C%88%E4%BB%BD%E6%9D%82%E8%AE%B0/</link>
      <pubDate>Sun, 09 May 2021 10:58:08 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/2021%E5%B9%B45%E6%9C%88%E4%BB%BD%E6%9D%82%E8%AE%B0/</guid>
      <description>&lt;h3 id=&#34;flutter安装过程问题汇总&#34;&gt;Flutter安装过程问题汇总&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>一些学习基础知识比较好的网站</title>
      <link>https://hnliu.github.io/post/%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%AF%94%E8%BE%83%E5%A5%BD%E7%9A%84%E7%BD%91%E7%AB%99/</link>
      <pubDate>Sat, 10 Apr 2021 11:00:59 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%AF%94%E8%BE%83%E5%A5%BD%E7%9A%84%E7%BD%91%E7%AB%99/</guid>
      <description>&lt;h3 id=&#34;1c-stl-教程&#34;&gt;1.c++ STL 教程&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://c.biancheng.net/stl/&#34;&gt;http://c.biancheng.net/stl/&lt;/a&gt;
关于 STL 是使用方法和底层相关的数据结构和算法比较的详细，还有简单直观的图解&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2021年4月大杂烩</title>
      <link>https://hnliu.github.io/post/2021%E5%B9%B44%E6%9C%88%E4%BB%BD%E6%9D%82%E8%AE%B0/</link>
      <pubDate>Fri, 09 Apr 2021 10:58:08 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/2021%E5%B9%B44%E6%9C%88%E4%BB%BD%E6%9D%82%E8%AE%B0/</guid>
      <description>&lt;h3 id=&#34;android-studio-如何搜索全部中文&#34;&gt;Android Studio 如何搜索全部中文&lt;/h3&gt;
&lt;p&gt;通过正则表达式搜索  ^((?!(*|//)).)+[\u4e00-\u9fa5]，需要勾选 Regex 勾选项。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>教你安装Atom编辑器并使用震撼的编辑效果</title>
      <link>https://hnliu.github.io/post/%E6%95%99%E4%BD%A0%E5%AE%89%E8%A3%85atom%E7%BC%96%E8%BE%91%E5%99%A8%E5%B9%B6%E4%BD%BF%E7%94%A8%E9%9C%87%E6%92%BC%E7%9A%84%E7%BC%96%E8%BE%91%E6%95%88%E6%9E%9C/</link>
      <pubDate>Fri, 09 Apr 2021 10:58:08 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/%E6%95%99%E4%BD%A0%E5%AE%89%E8%A3%85atom%E7%BC%96%E8%BE%91%E5%99%A8%E5%B9%B6%E4%BD%BF%E7%94%A8%E9%9C%87%E6%92%BC%E7%9A%84%E7%BC%96%E8%BE%91%E6%95%88%E6%9E%9C/</guid>
      <description>&lt;p&gt;ATOM是由 GitHub 打造的一个现代的代码编辑器。 它开源免费跨平台，并且整合 GIT 并提供类似 SublimeText 的包管理功能，支持插件扩展，可配置性非常高。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2021年3月大杂烩</title>
      <link>https://hnliu.github.io/post/2021%E5%B9%B43%E6%9C%88%E4%BB%BD%E6%9D%82%E8%AE%B0/</link>
      <pubDate>Tue, 09 Mar 2021 10:58:08 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/2021%E5%B9%B43%E6%9C%88%E4%BB%BD%E6%9D%82%E8%AE%B0/</guid>
      <description>&lt;h3 id=&#34;rxjava-backpressureutils-源码解析&#34;&gt;RxJava BackpressureUtils 源码解析&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>2021年1月大杂烩</title>
      <link>https://hnliu.github.io/post/2021%E5%B9%B41%E6%9C%88%E4%BB%BD%E6%9D%82%E8%AE%B0/</link>
      <pubDate>Sat, 09 Jan 2021 10:58:08 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/2021%E5%B9%B41%E6%9C%88%E4%BB%BD%E6%9D%82%E8%AE%B0/</guid>
      <description>&lt;p&gt;Binder
Android 系统为什么使用 Binder 实现跨进程通信，而不是使用 Local Socket 或者 Shared Memory。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2020年11月大杂烩</title>
      <link>https://hnliu.github.io/post/2020%E5%B9%B411%E6%9C%88%E6%9D%82%E8%AE%B0/</link>
      <pubDate>Mon, 09 Nov 2020 10:58:08 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/2020%E5%B9%B411%E6%9C%88%E6%9D%82%E8%AE%B0/</guid>
      <description>&lt;h3 id=&#34;android-屏幕适配总结&#34;&gt;Android 屏幕适配总结&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>2020年10月大杂烩</title>
      <link>https://hnliu.github.io/post/2020%E5%B9%B410%E6%9C%88%E6%9D%82%E8%AE%B0/</link>
      <pubDate>Fri, 09 Oct 2020 10:58:08 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/2020%E5%B9%B410%E6%9C%88%E6%9D%82%E8%AE%B0/</guid>
      <description>&lt;h3 id=&#34;一句话讲透epoll&#34;&gt;一句话讲透epoll&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>2020年9月大杂烩</title>
      <link>https://hnliu.github.io/post/2020%E5%B9%B49%E6%9C%88%E6%9D%82%E8%AE%B0/</link>
      <pubDate>Wed, 09 Sep 2020 10:58:08 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/2020%E5%B9%B49%E6%9C%88%E6%9D%82%E8%AE%B0/</guid>
      <description>&lt;h3 id=&#34;关于-deadsystemexception-说的比较细致&#34;&gt;关于 DeadSystemException 说的比较细致&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>2020年8月大杂烩</title>
      <link>https://hnliu.github.io/post/2020%E5%B9%B48%E6%9C%88%E5%A4%A7%E6%9D%82%E7%83%A9/</link>
      <pubDate>Fri, 14 Aug 2020 11:25:05 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/2020%E5%B9%B48%E6%9C%88%E5%A4%A7%E6%9D%82%E7%83%A9/</guid>
      <description>&lt;h3 id=&#34;一些比较好用的-android-stuido-快捷键&#34;&gt;一些比较好用的 Android Stuido 快捷键&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>2020年7月大杂烩</title>
      <link>https://hnliu.github.io/post/2020%E5%B9%B47%E6%9C%88%E5%A4%A7%E6%9D%82%E7%83%A9/</link>
      <pubDate>Mon, 13 Jul 2020 11:15:58 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/2020%E5%B9%B47%E6%9C%88%E5%A4%A7%E6%9D%82%E7%83%A9/</guid>
      <description>&lt;h3 id=&#34;一篇关于-android-系统启动及-app-启动讲解的非常清楚的文章&#34;&gt;一篇关于 android 系统启动及 app 启动讲解的非常清楚的文章&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>2020年6月大杂烩</title>
      <link>https://hnliu.github.io/post/2020%E5%B9%B46%E6%9C%88%E5%A4%A7%E6%9D%82%E7%83%A9/</link>
      <pubDate>Fri, 12 Jun 2020 11:14:48 -0400</pubDate>
      
      <guid>https://hnliu.github.io/post/2020%E5%B9%B46%E6%9C%88%E5%A4%A7%E6%9D%82%E7%83%A9/</guid>
      <description>&lt;h3 id=&#34;一些看到的比较好的技术文章&#34;&gt;一些看到的比较好的技术文章&lt;/h3&gt;
&lt;p&gt;android View.post 到底干了啥&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hnliu.github.io/post/handler%E7%AE%80%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hnliu.github.io/post/handler%E7%AE%80%E6%9E%90/</guid>
      <description>谈到Handler，有几个词是一直绕不过的，Message，Looper，MessageQueue，我们后面再单独解释他们每个的作用。先来说一下，Handler是用来做什么的，当我们需要做一些耗时的任务时，如果放在主线程来做，那么务必会导致UI的卡顿，甚至可能引起ANR（Application Not Responding），这种情况下，我们一般会创建一个新的线程，去执行耗时的任务，但是再任务执行完以后，我们如果把处理结果返回到主线程，并且让主线程去执行一些操作呢。这个时候就可以去使用Handler。
如果使用缺省的Handler构造函数，则这个handler会关联到当前线程的looper
handler.sendEmptyMessage、sendMessage，post 等等方法最终都会通过 Message.obtain() 从消息池中取一个可用的消息，然后按照 when 时间的先后顺序丢到 messageQueue 中。
我们知道Android 的应用进程启动发生在 ActivityThread的main方法，这个方法会先进行一系列的初始化工作，然后为当前线程创建一个Looper，然后调用Looper.loop 进入到一个死循环，不断从消息队列中获取消息执行，如果消息队列为空，或者队列中的消息都还没有到执行时间，则死循环会阻塞，CPU会得到释放。当有新的消息入队，或者队首的消息到了执行时间，则next方法中阻塞住的方法 nativePollOnce 就会继续执行。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hnliu.github.io/post/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hnliu.github.io/post/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/</guid>
      <description>事件分发机制 当我们嵌套去使用各种滑动控件的时候，经常会遇到各种滑动冲突的问题，比如 ViewPager 嵌套ScrollView，ScrollView 嵌套 recycleView。这个时候我们要么去使用别人已经处理过滑动冲突的组件，要么我们会自己去处理滑动的冲突。
我们首先来简单考虑一下，为什么会出现滑动冲突这种问题。
多个可以同方向或者反方向滑动的控件重叠在一起以后，就会出现控件无法按照我们的预期进行滑动，比如 ViewPager 内部嵌套了一个可以相同方向进行滑动的 scrollView。
我们首先一定是希望在触摸滑动的时候，优先滑动 scrollView，当 scrollView 滑动到底部或者顶部的时候，再去滑动外层的 ViewPager。可是当我们这样使用的时候，一切并不能尽如人意，内部的scrollView 居然不能滑动了。
首先 Activity 的 dispatchTouchEvent 会首先被调用，然后会调用到 ViewGroup的dispatchTouchEvent 方法。（这中间省略了 PhoneWindow 和 DecroView 的调用）</description>
    </item>
    
    <item>
      <title>联系我们</title>
      <link>https://hnliu.github.io/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hnliu.github.io/contact/</guid>
      <description>This is an example of a custom shortcode that you can put right into your content. You will need to add a form action to the the shortcode to make it work. Check out Formspree for a simple, free form service.
你的名字 电邮地址 需要电子邮件地址。  信息   </description>
    </item>
    
  </channel>
</rss>
