<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on hnliu&#39;s Blog</title>
    <link>https://hnliu.github.io/post/</link>
    <description>Recent content in Posts on hnliu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hnliu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS性能优化规则</title>
      <link>https://hnliu.github.io/post/js%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%A7%84%E5%88%99/</link>
      <pubDate>Thu, 04 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hnliu.github.io/post/js%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%A7%84%E5%88%99/</guid>
      <description>JS性能优化规则 1.作用域优化 随着作用域中的作用域数量的增加，访问当前作用域以外的变量的时间也在增加。所以访问全局变量总是比访问局部变量要慢</description>
    </item>
    
    <item>
      <title>观察者模式及如何通过消息机制（观察者模式）实现模块间解耦</title>
      <link>https://hnliu.github.io/post/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E8%A7%A3%E8%80%A6/</link>
      <pubDate>Tue, 06 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hnliu.github.io/post/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E8%A7%A3%E8%80%A6/</guid>
      <description>1、什么是观察者模式 什么是观察者模式呢，观察者模式又叫做订阅发布模式，类似这样的例子生活里随处可见，比如公众号，比如微博关注的功能，这都是订</description>
    </item>
    
    <item>
      <title>单一职责原则和开放封闭原则</title>
      <link>https://hnliu.github.io/post/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99%E5%92%8C%E5%BC%80%E6%94%BE%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99/</link>
      <pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hnliu.github.io/post/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99%E5%92%8C%E5%BC%80%E6%94%BE%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99/</guid>
      <description>单一职责原则和开放封闭原则 单一职责原则： 所谓单一职责原则，简单点说就是，每个类，每个方法最好是只做一件事情，只具备一个功能。这样做有什么好处</description>
    </item>
    
    <item>
      <title>一款好用的Visual Studio插件</title>
      <link>https://hnliu.github.io/post/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%A5%BD%E7%94%A8%E7%9A%84visualstudio%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hnliu.github.io/post/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%A5%BD%E7%94%A8%E7%9A%84visualstudio%E6%8F%92%E4%BB%B6/</guid>
      <description>导言：相信很多程序员都有这样的经历，当一句语句中出现了太多的小括号，中括号以后，就没办法，分清哪两个括号是配对的。Viasfora这个插件的</description>
    </item>
    
    <item>
      <title>大话设计模式之（装饰器模式）</title>
      <link>https://hnliu.github.io/post/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 02 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hnliu.github.io/post/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>导言：我曾经以为我可以用继承处理一切。后来我领教到运行时扩展，远比编译时期的继承威力大。装饰器模式可以给爱用继承的人一个全新的眼界。一旦你熟</description>
    </item>
    
    <item>
      <title>使用python对cocos2dx的手游图片资源进行加密</title>
      <link>https://hnliu.github.io/post/%E4%BD%BF%E7%94%A8python%E5%AF%B9cocos2dx%E7%9A%84%E6%89%8B%E6%B8%B8%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Thu, 08 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hnliu.github.io/post/%E4%BD%BF%E7%94%A8python%E5%AF%B9cocos2dx%E7%9A%84%E6%89%8B%E6%B8%B8%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86/</guid>
      <description>使用python对cocos2dx的手游图片资源进行加密 导言 由于项目的需要，要对游戏的图片资源进行加密，目前比较常用的做法应该是使用Text</description>
    </item>
    
  </channel>
</rss>